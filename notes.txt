## **React Summary Notes**

### **Overview**
- **React** is a single-page application (SPA) framework built on JavaScript, allowing for the creation of dynamic user interfaces.

### **Key Features**
- **Function-Based Components**: Modern React development favors function-based components over class-based components.
- **JSX Syntax**: 
  - Resembles HTML (approximately 95% HTML and 5% JavaScript).
  - Some HTML attributes have different names in JSX:
    - Use `className` instead of `class`.  
    - Use `htmlFor` instead of `for` in `<form>` elements.
  - Must return a single element/tag or use a fragment (`<>` and `</>`).

### **File Structure**
1. **Entry Point**: 
   - **`src/index.js`**: The main entry point of the application.
   
2. **Main App Component**: 
   - **`src/App.js`**: Frequently modified to develop the main application logic and structure.

3. **Static Assets**: 
   - **`public/`**: Contains static files like `index.html` and images/icons. Only modify `index.html` or replace images/icons as needed.

4. **Reusable Components**: 
   - **`src/components/`**: Folder for reusable components that you will create and modify.

5. **Styling**: 
   - **`src/index.css`** and **`src/App.css`**: Modify these for global and app-specific styles.

6. **Package and Dependencies**: 
   - **`package.json`**: Modified to add new dependencies and manage project settings.

7. **Files Not Typically Touched**: 
   - **`node_modules/`**: Automatically generated; do not modify.
   - **`serviceWorker.js`**: Typically left unchanged unless necessary.
   - **`reportWebVitals.js`**: Usually not modified.

### **Important Notes on JSX and Syntax**
- **JSX Fragments**: Use `<>` and `</>` to wrap multiple elements without adding extra nodes to the DOM.

### **Best Practices**
- Prefer **camelCase** for naming conventions in React components and attributes.
- Regularly save and test changes to ensure functionality.
- Organize components and assets logically within the `src` directory for maintainability.
